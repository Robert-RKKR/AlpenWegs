# Generated by Django 5.2.5 on 2025-09-01 21:09

import alpenwegs.ashared.validators.base_validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('compendiums', '0002_remove_poimodel_details_description_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SectionModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Object Description')),
                ('comment_count', models.BigIntegerField(default=0, help_text='Total count of user-submitted comments on this object.', verbose_name='Number of Comments')),
                ('visit_count', models.BigIntegerField(default=0, help_text='Number of times this object has been visited by users.', verbose_name='Visit Count')),
                ('download_count', models.BigIntegerField(default=0, help_text='Total number of times the object has been downloaded.', verbose_name='Download Count')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('score', models.FloatField(default=0, help_text='The overall rating score, calculated based on user ratings. Score is based on user scores, where users can rate each object from 1 to 5.', verbose_name='Score')),
                ('geojson', models.JSONField(help_text='GeoJSON representation of the route path. Created based on provided GPX file.', verbose_name='Route GeoJSON Data')),
                ('duration', models.FloatField(help_text="User estimated total time required to complete the route, measured in hours. This estimate considers the user's predicted hiking pace along with elevation changes but may still be influenced by factors such as weather conditions and trail difficulty.", verbose_name='Estimated Duration')),
                ('distance', models.FloatField(help_text='The total length of the route, measured in kilometres. This includes the full distance from start to finish, including both flat and uphill sections.', verbose_name='Route Distance')),
                ('elevation_gain', models.FloatField(help_text='Total amount of ascent measured in meters. This is the cumulative elevation gain over the entire route, adding up all the uphill sections.', verbose_name='Elevation Gain')),
                ('elevation_loss', models.FloatField(help_text='Total amount of descent measured in meters. This is the cumulative descent over the entire route, adding up all downhill sections.', verbose_name='Elevation Loss')),
                ('highest_elevation', models.FloatField(help_text='Maximum altitude reached along the route, measured in meters above sea level.', verbose_name='Highest Elevation')),
                ('lowest_elevation', models.FloatField(help_text='Minimum altitude encountered along the route, measured in meters above sea level.', verbose_name='Lowest Elevation')),
                ('average_grade', models.FloatField(help_text='The average percentage of incline over the entire route, calculated as (total elevation gain / total distance) Ã— 100. A higher value indicates a steeper route.', verbose_name='Average Grade')),
                ('highest_grade', models.FloatField(help_text='The steepest percentage climb at any point on the route. This is the most challenging section in terms of gradient.', verbose_name='Maximum Grade')),
                ('track_types', models.JSONField(blank=True, help_text='JSON structure describing the types of terrain.', null=True, verbose_name='Track Types')),
                ('elevation_graph', models.JSONField(blank=True, help_text='Xxx.', null=True, verbose_name='Elevation Graph')),
                ('category', models.IntegerField(choices=[(101, 'Running'), (102, 'Hiking'), (104, 'Climbing'), (105, 'Via Ferrata'), (107, 'Trail Running'), (201, 'Winter Running'), (202, 'Winter Hiking'), (205, 'Snowshoeing'), (206, 'Ski Touring'), (207, 'Cross-Country Skiing'), (301, 'Biking'), (302, 'Mountain Biking'), (303, 'Downhill Biking')], default=102, help_text='The sport or activity associated with this section (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('difficulty', models.CharField(blank=True, help_text='Overall difficulty level of the section. Options include: Easy, Moderate, Difficult, Very Difficult, and Extremely Difficult sections.', max_length=32, null=True, verbose_name='General Difficulty Level')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category (e.g., T2 for hiking, K3 for via ferrata). Optional field.', verbose_name='Difficulty Level')),
                ('stamina_requirement', models.CharField(blank=True, help_text='Level of stamina required to complete the section.', max_length=32, null=True, verbose_name='Stamina Requirement')),
                ('experience_requirement', models.CharField(blank=True, help_text='Level of experience required to safely complete the entire section.', max_length=32, null=True, verbose_name='Experience Requirement')),
                ('potential_risk_requirement', models.CharField(blank=True, help_text='Potential risks associated with this section.', max_length=32, null=True, verbose_name='Risk Requirement')),
                ('potential_risk_description', models.CharField(blank=True, help_text='Detailed description of possible hazards along the section.', max_length=1024, null=True, verbose_name='Risk Description')),
                ('best_seasons', models.CharField(blank=True, help_text='Best seasons for hiking this section.', max_length=32, null=True, verbose_name='Best Seasons')),
                ('best_months', models.JSONField(blank=True, help_text='List of best months to complete this section.', null=True, verbose_name='Best Months')),
                ('winter_season', models.BooleanField(blank=True, help_text='Indicates if the section is accessible in winter.', null=True, verbose_name='Available in Winter')),
                ('summer_season', models.BooleanField(blank=True, help_text='Indicates if the section is accessible in summer.', null=True, verbose_name='Available in Summer')),
                ('family_friendly', models.BooleanField(blank=True, help_text='Indicates if the section is suitable for families.', null=True, verbose_name='Family Friendly')),
                ('photo_primary', models.CharField(blank=True, max_length=255, null=True)),
                ('user_difficulty', models.CharField(blank=True, max_length=32, null=True)),
                ('user_duration', models.BigIntegerField(blank=True, null=True)),
                ('creator', models.ForeignKey(help_text='Stores the unique identifier (UUID) of the user who created the object. This field is used to track ownership of the object.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
            },
        ),
        migrations.CreateModel(
            name='SectionToCardModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('order', models.IntegerField(default=0, help_text='Defines the ordering or precedence of the relationship.', verbose_name='Order')),
                ('card', models.ForeignKey(help_text='Xxx.', on_delete=django.db.models.deletion.PROTECT, related_name='section_card_associations', to='compendiums.cardmodel', verbose_name='Card')),
                ('section', models.ForeignKey(help_text='The section that this point of interest is associated with.', on_delete=django.db.models.deletion.PROTECT, related_name='card_section_associations', to='explorers.sectionmodel', verbose_name='Section')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sectionmodel',
            name='cards',
            field=models.ManyToManyField(help_text='Cards associated with the section that can be obtained by the user by completing this section.', related_name='section_cards', through='explorers.SectionToCardModel', to='compendiums.cardmodel', verbose_name='Section Cards'),
        ),
        migrations.CreateModel(
            name='SectionToPoiModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('order', models.IntegerField(default=0, help_text='Defines the ordering or precedence of the relationship.', verbose_name='Order')),
                ('start_point', models.BooleanField(default=False, help_text='Indicates whether this point of interest is the starting point of the associated section. If True, this PoI marks the beginning of the section; otherwise, it is other typ of associated PoI like end or middle point.', verbose_name='Is Start Point')),
                ('end_point', models.BooleanField(default=False, help_text='Indicates whether this point of interest is the ending point of the associated section. If True, this PoI marks the end of the section; otherwise, it is other typ of associated PoI like beginning or middle point.', verbose_name='Is End Point')),
                ('middle_point', models.BooleanField(default=False, help_text='Indicates whether this point of interest is the middle point of the associated section. If True, this PoI is considered as a middle or intermediate point along the section; otherwise, it is other typ of associated PoI like beginning or end point of the section.', verbose_name='Is Middle Point')),
                ('poi', models.ForeignKey(help_text='The point of interest associated with a section.', on_delete=django.db.models.deletion.PROTECT, related_name='section_poi_associations', to='compendiums.poimodel', verbose_name='Point of Interest')),
                ('section', models.ForeignKey(help_text='The section that this point of interest is associated with.', on_delete=django.db.models.deletion.PROTECT, related_name='poi_section_associations', to='explorers.sectionmodel', verbose_name='Section')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sectionmodel',
            name='pois',
            field=models.ManyToManyField(help_text='A list of Points of Interest associated with the section, highlighting key places for travelers to visit along the way. Points of Interest also mark the start and end points of the section.', related_name='section_pois', through='explorers.SectionToPoiModel', to='compendiums.poimodel', verbose_name='Section Points of Interest (PoIs)'),
        ),
        migrations.CreateModel(
            name='SectionToRegionModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('order', models.IntegerField(default=0, help_text='Defines the ordering or precedence of the relationship.', verbose_name='Order')),
                ('region', models.ForeignKey(help_text='Xxx.', on_delete=django.db.models.deletion.PROTECT, related_name='section_region_associations', to='compendiums.regionmodel', verbose_name='Region')),
                ('section', models.ForeignKey(help_text='The section that this point of interest is associated with.', on_delete=django.db.models.deletion.PROTECT, related_name='region_section_associations', to='explorers.sectionmodel', verbose_name='Section')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sectionmodel',
            name='regions',
            field=models.ManyToManyField(help_text='Geographical regions through which the section passes.', related_name='section_regions', through='explorers.SectionToRegionModel', to='compendiums.regionmodel', verbose_name='Section Regions'),
        ),
    ]
