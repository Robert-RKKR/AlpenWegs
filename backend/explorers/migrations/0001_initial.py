# Generated by Django 5.2.5 on 2025-09-07 20:48

import alpenwegs.ashared.validators.base_validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RouteModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('difficulty', models.CharField(blank=True, help_text='Overall difficulty level of the route. Options include: Easy, Moderate, Difficult, Very Difficult, and Extremely Difficult routes.', max_length=32, null=True, verbose_name='General Difficulty Level')),
                ('stamina_requirement', models.CharField(blank=True, help_text='Level of stamina required to complete the route.', max_length=32, null=True, verbose_name='Stamina Requirement')),
                ('experience_requirement', models.CharField(blank=True, help_text='Level of experience required to safely complete the entire route.', max_length=32, null=True, verbose_name='Experience Requirement')),
                ('potential_risk_requirement', models.CharField(blank=True, help_text='Potential risks associated with this route.', max_length=32, null=True, verbose_name='Risk Requirement')),
                ('potential_risk_description', models.CharField(blank=True, help_text='Detailed description of possible hazards along the route.', max_length=8192, null=True, verbose_name='Risk Description')),
                ('family_friendly', models.BooleanField(blank=True, help_text='Indicates if the route is suitable for families.', null=True, verbose_name='Family Friendly')),
                ('best_seasons', models.IntegerField(choices=[(1, 'Winter'), (2, 'Spring'), (3, 'Summer'), (4, 'Autumn')], default=3, help_text='Best seasons for hiking this route.', verbose_name='Best Seasons')),
                ('best_months', models.IntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=1, help_text='List of best months to complete this route.', verbose_name='Best Months')),
                ('winter_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in winter.', null=True, verbose_name='Available in Winter')),
                ('summer_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in summer.', null=True, verbose_name='Available in Summer')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('category', models.IntegerField(choices=[(110, 'Running'), (120, 'Hiking'), (130, 'Climbing'), (140, 'Via Ferrata'), (150, 'Trail Running'), (210, 'Winter Running'), (220, 'Winter Hiking'), (230, 'Snowshoeing'), (240, 'Ski Touring'), (250, 'Cross-Country Skiing'), (301, 'Biking'), (310, 'Mountain Biking'), (320, 'Downhill Biking')], default=120, help_text='The sport or activity associated with this object (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category. Examples: T2 for hiking routes, K3 for via ferrata. This field enables precise classification of route complexity using established grading systems.', verbose_name='Difficulty Level')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Detail Description')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('like_count', models.BigIntegerField(default=0, help_text='Total number of likes this %(class)s has received. This field is used for faster queries and should be synchronized with `users_liked` relations between Model and UserModel.', verbose_name='Like Count')),
                ('accomplished_count', models.BigIntegerField(default=0, help_text='Total number of users who have accomplished this %(class)s. This field improves performance and should be kept in sync with `users_accomplished` relations between %(class)s and UserModel.', verbose_name='Accomplished Count')),
                ('comment_count', models.BigIntegerField(default=0, help_text='Total count of user-submitted comments on this object.', verbose_name='Number of Comments')),
                ('visit_count', models.BigIntegerField(default=0, help_text='Number of times this object has been visited by users.', verbose_name='Visit Count')),
                ('download_count', models.BigIntegerField(default=0, help_text='Total number of times the object has been downloaded.', verbose_name='Download Count')),
                ('score', models.FloatField(default=0, help_text='The overall rating score, calculated based on user ratings. Score is based on user scores, where users can rate each object from 1 to 5.', verbose_name='Score')),
            ],
            options={
                'verbose_name': 'Route',
                'verbose_name_plural': 'Routes',
                'permissions': [('change_own_routemodel', 'Can change own routes'), ('change_all_routemodel', 'Can change all routes'), ('delete_own_routemodel', 'Can delete own routes'), ('delete_all_routemodel', 'Can delete all routes'), ('view_own_routemodel', 'Can view own routes'), ('view_all_routemodel', 'Can view all routes'), ('add_own_routemodel', 'Can add own routes')],
            },
        ),
        migrations.CreateModel(
            name='SectionModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('difficulty', models.CharField(blank=True, help_text='Overall difficulty level of the route. Options include: Easy, Moderate, Difficult, Very Difficult, and Extremely Difficult routes.', max_length=32, null=True, verbose_name='General Difficulty Level')),
                ('stamina_requirement', models.CharField(blank=True, help_text='Level of stamina required to complete the route.', max_length=32, null=True, verbose_name='Stamina Requirement')),
                ('experience_requirement', models.CharField(blank=True, help_text='Level of experience required to safely complete the entire route.', max_length=32, null=True, verbose_name='Experience Requirement')),
                ('potential_risk_requirement', models.CharField(blank=True, help_text='Potential risks associated with this route.', max_length=32, null=True, verbose_name='Risk Requirement')),
                ('potential_risk_description', models.CharField(blank=True, help_text='Detailed description of possible hazards along the route.', max_length=8192, null=True, verbose_name='Risk Description')),
                ('family_friendly', models.BooleanField(blank=True, help_text='Indicates if the route is suitable for families.', null=True, verbose_name='Family Friendly')),
                ('best_seasons', models.IntegerField(choices=[(1, 'Winter'), (2, 'Spring'), (3, 'Summer'), (4, 'Autumn')], default=3, help_text='Best seasons for hiking this route.', verbose_name='Best Seasons')),
                ('best_months', models.IntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=1, help_text='List of best months to complete this route.', verbose_name='Best Months')),
                ('winter_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in winter.', null=True, verbose_name='Available in Winter')),
                ('summer_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in summer.', null=True, verbose_name='Available in Summer')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('category', models.IntegerField(choices=[(110, 'Running'), (120, 'Hiking'), (130, 'Climbing'), (140, 'Via Ferrata'), (150, 'Trail Running'), (210, 'Winter Running'), (220, 'Winter Hiking'), (230, 'Snowshoeing'), (240, 'Ski Touring'), (250, 'Cross-Country Skiing'), (301, 'Biking'), (310, 'Mountain Biking'), (320, 'Downhill Biking')], default=120, help_text='The sport or activity associated with this object (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category. Examples: T2 for hiking routes, K3 for via ferrata. This field enables precise classification of route complexity using established grading systems.', verbose_name='Difficulty Level')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Detail Description')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('like_count', models.BigIntegerField(default=0, help_text='Total number of likes this %(class)s has received. This field is used for faster queries and should be synchronized with `users_liked` relations between Model and UserModel.', verbose_name='Like Count')),
                ('geojson', models.JSONField(help_text='GeoJSON representation of the route path. Created based on provided GPX file.', verbose_name='Route GeoJSON Data')),
                ('duration', models.FloatField(help_text="User estimated total time required to complete the route, measured in hours. This estimate considers the user's predicted hiking pace along with elevation changes but may still be influenced by factors such as weather conditions and trail difficulty.", verbose_name='Estimated Duration')),
                ('distance', models.FloatField(help_text='The total length of the route, measured in kilometres. This includes the full distance from start to finish, including both flat and uphill sections.', verbose_name='Route Distance')),
                ('elevation_gain', models.FloatField(help_text='Total amount of ascent measured in meters. This is the cumulative elevation gain over the entire route, adding up all the uphill sections.', verbose_name='Elevation Gain')),
                ('elevation_loss', models.FloatField(help_text='Total amount of descent measured in meters. This is the cumulative descent over the entire route, adding up all downhill sections.', verbose_name='Elevation Loss')),
                ('highest_elevation', models.FloatField(help_text='Maximum altitude reached along the route, measured in meters above sea level.', verbose_name='Highest Elevation')),
                ('lowest_elevation', models.FloatField(help_text='Minimum altitude encountered along the route, measured in meters above sea level.', verbose_name='Lowest Elevation')),
                ('average_grade', models.FloatField(help_text='The average percentage of incline over the entire route, calculated as (total elevation gain / total distance) × 100. A higher value indicates a steeper route.', verbose_name='Average Grade')),
                ('highest_grade', models.FloatField(help_text='The steepest percentage climb at any point on the route. This is the most challenging section in terms of gradient.', verbose_name='Maximum Grade')),
                ('track_types', models.JSONField(blank=True, help_text='JSON structure describing the types of terrain.', null=True, verbose_name='Track Types')),
                ('elevation_graph', models.JSONField(blank=True, help_text='Xxx.', null=True, verbose_name='Elevation Graph')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'permissions': [('change_own_sectionmodel', 'Can change own sections'), ('change_all_sectionmodel', 'Can change all sections'), ('delete_own_sectionmodel', 'Can delete own sections'), ('delete_all_sectionmodel', 'Can delete all sections'), ('view_own_sectionmodel', 'Can view own sections'), ('view_all_sectionmodel', 'Can view all sections'), ('add_own_sectionmodel', 'Can add own sections')],
            },
        ),
        migrations.CreateModel(
            name='SectionToCardModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionToPhotoModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionToPoiModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('position', models.IntegerField(default=10, help_text='Manual ordering within this relationship. Use gap indexing (10,20,30).', verbose_name='Position')),
                ('role', models.IntegerField(choices=[(1, 'Start'), (2, 'Via'), (3, 'End')], db_index=True, default=2, help_text='Role of this Point of Interest within the section’s path. "START" marks the logical beginning of the section (at most one per section). "VIA" intermediate waypoint(s) along the section; multiple allowed and ordered via seq_index; annotations that do not change the section geometry. "END" marks the logical end of the section (at most one per section). The POI does not have to lie exactly on the path; nearby POIs may be snapped to the line or connected visually. Typical anchors: START ≈ 0 m, END ≈ total length.', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Base Ordered Relationship Model',
                'verbose_name_plural': 'Base Ordered Relationship Models',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionToRegionModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
            ],
            options={
                'verbose_name': 'Base Relationship Model',
                'verbose_name_plural': 'Base Relationship Models',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TripModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('category', models.IntegerField(choices=[(110, 'Running'), (120, 'Hiking'), (130, 'Climbing'), (140, 'Via Ferrata'), (150, 'Trail Running'), (210, 'Winter Running'), (220, 'Winter Hiking'), (230, 'Snowshoeing'), (240, 'Ski Touring'), (250, 'Cross-Country Skiing'), (301, 'Biking'), (310, 'Mountain Biking'), (320, 'Downhill Biking')], default=120, help_text='The sport or activity associated with this object (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category. Examples: T2 for hiking routes, K3 for via ferrata. This field enables precise classification of route complexity using established grading systems.', verbose_name='Difficulty Level')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Detail Description')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('like_count', models.BigIntegerField(default=0, help_text='Total number of likes this %(class)s has received. This field is used for faster queries and should be synchronized with `users_liked` relations between Model and UserModel.', verbose_name='Like Count')),
                ('accomplished_count', models.BigIntegerField(default=0, help_text='Total number of users who have accomplished this %(class)s. This field improves performance and should be kept in sync with `users_accomplished` relations between %(class)s and UserModel.', verbose_name='Accomplished Count')),
                ('comment_count', models.BigIntegerField(default=0, help_text='Total count of user-submitted comments on this object.', verbose_name='Number of Comments')),
                ('visit_count', models.BigIntegerField(default=0, help_text='Number of times this object has been visited by users.', verbose_name='Visit Count')),
                ('download_count', models.BigIntegerField(default=0, help_text='Total number of times the object has been downloaded.', verbose_name='Download Count')),
                ('score', models.FloatField(default=0, help_text='The overall rating score, calculated based on user ratings. Score is based on user scores, where users can rate each object from 1 to 5.', verbose_name='Score')),
                ('days', models.IntegerField(help_text='Amount of days the multi-day route takes.', verbose_name='Days')),
            ],
            options={
                'verbose_name': 'Trip',
                'verbose_name_plural': 'Trips',
                'permissions': [('change_own_tripmodel', 'Can change own trips'), ('change_all_tripmodel', 'Can change all trips'), ('delete_own_tripmodel', 'Can delete own trips'), ('delete_all_tripmodel', 'Can delete all trips'), ('view_own_tripmodel', 'Can view own trips'), ('view_all_tripmodel', 'Can view all trips'), ('add_own_tripmodel', 'Can add own trips')],
            },
        ),
        migrations.CreateModel(
            name='TripToRouteModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('position', models.IntegerField(default=10, help_text='Manual ordering within this relationship. Use gap indexing (10,20,30).', verbose_name='Position')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Detail Description')),
            ],
            options={
                'verbose_name': 'Base Ordered Relationship Model',
                'verbose_name_plural': 'Base Ordered Relationship Models',
                'abstract': False,
            },
        ),
    ]
