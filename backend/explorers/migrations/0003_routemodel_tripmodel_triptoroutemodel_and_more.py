# Generated by Django 5.2.5 on 2025-09-03 09:59

import alpenwegs.ashared.validators.base_validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compendiums', '0002_initial'),
        ('explorers', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RouteModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('difficulty', models.CharField(blank=True, help_text='Overall difficulty level of the route. Options include: Easy, Moderate, Difficult, Very Difficult, and Extremely Difficult routes.', max_length=32, null=True, verbose_name='General Difficulty Level')),
                ('stamina_requirement', models.CharField(blank=True, help_text='Level of stamina required to complete the route.', max_length=32, null=True, verbose_name='Stamina Requirement')),
                ('experience_requirement', models.CharField(blank=True, help_text='Level of experience required to safely complete the entire route.', max_length=32, null=True, verbose_name='Experience Requirement')),
                ('potential_risk_requirement', models.CharField(blank=True, help_text='Potential risks associated with this route.', max_length=32, null=True, verbose_name='Risk Requirement')),
                ('potential_risk_description', models.CharField(blank=True, help_text='Detailed description of possible hazards along the route.', max_length=8192, null=True, verbose_name='Risk Description')),
                ('family_friendly', models.BooleanField(blank=True, help_text='Indicates if the route is suitable for families.', null=True, verbose_name='Family Friendly')),
                ('best_seasons', models.CharField(blank=True, help_text='Best seasons for hiking this route.', max_length=32, null=True, verbose_name='Best Seasons')),
                ('best_months', models.JSONField(blank=True, help_text='List of best months to complete this route.', null=True, verbose_name='Best Months')),
                ('winter_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in winter.', null=True, verbose_name='Available in Winter')),
                ('summer_season', models.BooleanField(blank=True, help_text='Indicates if the route is accessible in summer.', null=True, verbose_name='Available in Summer')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('category', models.IntegerField(choices=[(110, 'Running'), (120, 'Hiking'), (130, 'Climbing'), (140, 'Via Ferrata'), (150, 'Trail Running'), (210, 'Winter Running'), (220, 'Winter Hiking'), (230, 'Snowshoeing'), (240, 'Ski Touring'), (250, 'Cross-Country Skiing'), (301, 'Biking'), (310, 'Mountain Biking'), (320, 'Downhill Biking')], default=120, help_text='The sport or activity associated with this object (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category. Examples: T2 for hiking routes, K3 for via ferrata. This field enables precise classification of route complexity using established grading systems.', verbose_name='Difficulty Level')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Object Description')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('like_count', models.BigIntegerField(default=0, help_text='Total number of likes this %(class)s has received. This field is used for faster queries and should be synchronized with `users_liked` relations between Model and UserModel.', verbose_name='Like Count')),
                ('accomplished_count', models.BigIntegerField(default=0, help_text='Total number of users who have accomplished this %(class)s. This field improves performance and should be kept in sync with `users_accomplished` relations between %(class)s and UserModel.', verbose_name='Accomplished Count')),
                ('comment_count', models.BigIntegerField(default=0, help_text='Total count of user-submitted comments on this object.', verbose_name='Number of Comments')),
                ('visit_count', models.BigIntegerField(default=0, help_text='Number of times this object has been visited by users.', verbose_name='Visit Count')),
                ('download_count', models.BigIntegerField(default=0, help_text='Total number of times the object has been downloaded.', verbose_name='Download Count')),
                ('score', models.FloatField(default=0, help_text='The overall rating score, calculated based on user ratings. Score is based on user scores, where users can rate each object from 1 to 5.', verbose_name='Score')),
                ('creator', models.ForeignKey(help_text='Stores the unique identifier (UUID) of the user who created the object. This field is used to track ownership of the object.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('users_accomplished', models.ManyToManyField(help_text='Users who have accomplished or completed this %(class)s. Allows queries of which members completed a %(class)s.', related_name='%(class)s_users_accomplished', to=settings.AUTH_USER_MODEL, verbose_name='Users Accomplished')),
                ('users_liked', models.ManyToManyField(help_text='Users who liked this %(class)s. Used to record engagement and allow retrieval of which members expressed a positive reaction.', related_name='%(class)s_users_liked', to=settings.AUTH_USER_MODEL, verbose_name='Users Liked')),
            ],
            options={
                'verbose_name': 'Route',
                'verbose_name_plural': 'Routes',
            },
        ),
        migrations.CreateModel(
            name='TripModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('name', models.CharField(help_text='A unique name for the object. Must be between 3 and 128 characters long and can include letters, digits, spaces, or special characters such as -, _, and spaces. This field does not serve as a unique identifier within the application but helps users differentiate it from other objects.', max_length=128, unique=True, validators=[alpenwegs.ashared.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text="A unique, URL-friendly version of the name, automatically generated from the object's name. This field is used for SEO and as an identifier in URLs.", max_length=128, verbose_name='Slug')),
                ('snippet', models.CharField(blank=True, help_text='A short description of the object, between 8 and 256 characters. It may include letters, numbers, spaces, and the special characters -, _, and .', max_length=256, null=True, validators=[alpenwegs.ashared.validators.base_validators.SnippetValueValidator()], verbose_name='Snippet')),
                ('category', models.IntegerField(choices=[(110, 'Running'), (120, 'Hiking'), (130, 'Climbing'), (140, 'Via Ferrata'), (150, 'Trail Running'), (210, 'Winter Running'), (220, 'Winter Hiking'), (230, 'Snowshoeing'), (240, 'Ski Touring'), (250, 'Cross-Country Skiing'), (301, 'Biking'), (310, 'Mountain Biking'), (320, 'Downhill Biking')], default=120, help_text='The sport or activity associated with this object (e.g., hiking, via ferrata, climbing, biking).', verbose_name='Sport Category')),
                ('category_specific_difficulty', models.IntegerField(choices=[(121, 'T1 - Easy Hiking'), (122, 'T2 - Mountain Hiking'), (123, 'T3 - Demanding Mountain Hiking'), (124, 'T4 - Alpine Hiking'), (125, 'T5 - Demanding Alpine Hiking'), (126, 'T6 - Difficult Alpine Hiking'), (141, 'K1 - Easy'), (142, 'K2 - Moderate'), (143, 'K3 - Difficult'), (144, 'K4 - Very Difficult'), (145, 'K5 - Extreme'), (146, 'K6 - Expert'), (131, 'UIAA III'), (132, 'UIAA IV'), (133, 'UIAA V'), (134, 'UIAA VI'), (135, 'UIAA VII')], default=123, help_text='Difficulty level within the chosen sport category. Examples: T2 for hiking routes, K3 for via ferrata. This field enables precise classification of route complexity using established grading systems.', verbose_name='Difficulty Level')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Object Description')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the object is publicly accessible (True) or private (False). If set to True, the object will be visible to all users and guests.', verbose_name='Is Public')),
                ('like_count', models.BigIntegerField(default=0, help_text='Total number of likes this %(class)s has received. This field is used for faster queries and should be synchronized with `users_liked` relations between Model and UserModel.', verbose_name='Like Count')),
                ('accomplished_count', models.BigIntegerField(default=0, help_text='Total number of users who have accomplished this %(class)s. This field improves performance and should be kept in sync with `users_accomplished` relations between %(class)s and UserModel.', verbose_name='Accomplished Count')),
                ('comment_count', models.BigIntegerField(default=0, help_text='Total count of user-submitted comments on this object.', verbose_name='Number of Comments')),
                ('visit_count', models.BigIntegerField(default=0, help_text='Number of times this object has been visited by users.', verbose_name='Visit Count')),
                ('download_count', models.BigIntegerField(default=0, help_text='Total number of times the object has been downloaded.', verbose_name='Download Count')),
                ('score', models.FloatField(default=0, help_text='The overall rating score, calculated based on user ratings. Score is based on user scores, where users can rate each object from 1 to 5.', verbose_name='Score')),
                ('days', models.IntegerField(help_text='Amount of days the multi-day route takes.', verbose_name='Days')),
                ('creator', models.ForeignKey(help_text='Stores the unique identifier (UUID) of the user who created the object. This field is used to track ownership of the object.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('users_accomplished', models.ManyToManyField(help_text='Users who have accomplished or completed this %(class)s. Allows queries of which members completed a %(class)s.', related_name='%(class)s_users_accomplished', to=settings.AUTH_USER_MODEL, verbose_name='Users Accomplished')),
                ('users_liked', models.ManyToManyField(help_text='Users who liked this %(class)s. Used to record engagement and allow retrieval of which members expressed a positive reaction.', related_name='%(class)s_users_liked', to=settings.AUTH_USER_MODEL, verbose_name='Users Liked')),
            ],
            options={
                'verbose_name': 'Trip',
                'verbose_name_plural': 'Trips',
            },
        ),
        migrations.CreateModel(
            name='TripToRouteModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the object, automatically generated as a UUIDv4 value.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Stores the date and time when the object was firstly created. This timestamp field is automatically set when the object is created and cannot be modified after creation.', verbose_name='Created Timestamp')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Records the date and time when the object was last updated. This timestamp field is automatically updated whenever the object is modified.', verbose_name='Updated Timestamp')),
                ('position', models.IntegerField(default=10, help_text='Manual ordering within this relationship. Use gap indexing (10,20,30).', verbose_name='Position')),
                ('description', models.TextField(blank=True, help_text='A detailed description of the object. Supports plain text, rich text, or Markdown. Intended for contextual details such as terrain, difficulty level, notable landmarks, scenic highlights, and any other creator-provided insights.', null=True, verbose_name='Object Description')),
                ('poi', models.ForeignKey(blank=True, help_text='The point of interest associated with Route to Trip M2M relationship.', null=True, on_delete=django.db.models.deletion.CASCADE, to='compendiums.poimodel', verbose_name='Point of Interest')),
                ('route', models.ForeignKey(help_text='The Route that is associated with the Trip to Route M2M relationship.', on_delete=django.db.models.deletion.CASCADE, related_name='trip_route_associations', to='explorers.routemodel', verbose_name='Route')),
                ('trip', models.ForeignKey(help_text='The Trip that is associated with the Route to Trip M2M relationship.', on_delete=django.db.models.deletion.CASCADE, related_name='route_trip_associations', to='explorers.tripmodel', verbose_name='Trip')),
            ],
            options={
                'verbose_name': 'Base Ordered Relationship Model',
                'verbose_name_plural': 'Base Ordered Relationship Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tripmodel',
            name='routes',
            field=models.ManyToManyField(help_text='Associated Routes.', related_name='trip_routes', through='explorers.TripToRouteModel', to='explorers.routemodel', verbose_name='Routes'),
        ),
        migrations.AddField(
            model_name='routemodel',
            name='trips',
            field=models.ManyToManyField(help_text='Trips that include this route as part of a multi-day experience.', related_name='route_trips', through='explorers.TripToRouteModel', to='explorers.tripmodel', verbose_name='Route Trips'),
        ),
    ]
